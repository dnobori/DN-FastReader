@model IEnumerable<DN_FastReader.Account>

@{
    Model._MarkNotNull();
    ViewData["Title"] = "アカウント一覧";
}

<h2 class="title is-4">@ViewData["Title"]</h2>

<p>
    @Html.ActionLink("新しいアカウントを追加", "Create", new { }, new { @class = "button is-info" })
</p>
<p>　</p>

@if (Model.Count() >= 1)
{
    <p>登録済みアカウントの認証情報 (API トークンなど) は、万一このページが不正にアクセスされても読み取られないように、この Web 画面には表示されていません。<br />認証情報を確認したい場合は、サーバーの Local/App_FastReader/Config/AppSettingsEx/Accounts.json をご覧ください。</p><BR />
}

@foreach (var item in Model)
{
    string statusColor = "warning";
    string statusText = "まだ同期していません - OAuth2 ユーザー認証が必要です";
    bool showUserAuthButton = true;

    if (item.ErrorStr._IsFilled())
    {
        statusColor = "danger";
        statusText = "エラーが発生しています";
        showUserAuthButton = false;
    }
    else if (item.AccountInfoStr._IsFilled())
    {
        statusColor = "success";
        statusText = "正常に同期中";
        showUserAuthButton = false;
    }
    else if (item.IsStarted)
    {
        statusColor = "info";
        statusText = "初期化中";
        showUserAuthButton = false;
    }

    <div class="box">
        <article class="accounts">
            <div class="accounts_content">
                <div class="content">
                    <div class="control">
                        <div class="tags has-addons">
                            <span class="tag is-dark has-text-weight-bold">@item.ProviderName._ReplaceStr("_", " ")</span>
                            <span class="tag is-@statusColor has-text-weight-bold">@statusText</span>
                        </div>
                    </div>
                    @if (showUserAuthButton)
                    {
                        <p></p>
                        @Html.ActionLink("ユーザー認証を実施する", "AuthStart", new { id = item.Guid }, new { @class = "button is-info" })
                    }

                    <strong>設定 ID: @item.Guid</strong><br />

                    @if (item.AccountInfoStr._IsFilled())
                    {
                        <strong>アカウント名: @(item.AccountInfoStr) </strong><br />
                    }
                    @if (item.ErrorStr._IsFilled())
                    {
                        <p>現在発生しているエラー:</p>
                        <div class="notification is-danger">
                            @(item.ErrorStr)
                        </div>
                    }
                    <p> </p>
                    @*@Html.ActionLink("このアカウントを削除", "Delete", new { id = item.Guid }, new { @class = "button is-light" })*@

                    <button class="button is-light" onclick="vue.deleteConfirm('@item.Guid', '@item.DeleteUrl')">このアカウントを削除</button>
                </div>
            </div>
        </article>
    </div>

}


<p>　</p>
<div>
    <a asp-action="Index" asp-controller="Home" class="button is-primary">トップページに戻る</a>
</div>

@section scripts {

    <script type="text/javascript">

        var vue = new Vue({

            methods:
            {
                deleteConfirm: function (id, url) {
                    this.$dialog.confirm({
                        title: "アカウントの削除",
                        message: "指定されたアカウントを削除します。よろしいですか?",
                        type: "is-danger",
                        onConfirm: () => {
                            window.location.href = url;
                        },
                    });
                },
            },

        });

    </script>

}
